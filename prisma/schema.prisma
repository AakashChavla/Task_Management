// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  isApproved    Boolean        @default(true)
  isVerified    Boolean        @default(false)
  otp           Int?
  otpCreatedAt  DateTime?
  sessionToken  String?
  lastLoginAt   DateTime?
  role          Role           @default(MANAGER)
  tasks         Task[]         @relation("AssignedTasks")
  comments      Comment[]
  notifications Notification[]
  activityLogs  ActivityLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Project       Project[]
}

enum Role {
  ADMIN
  USER
  MANAGER
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  tasks       Task[]
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id           String        @id @default(uuid())
  title        String
  description  String?
  status       Status        @default(PENDING)
  priority     Priority      @default(MEDIUM)
  dueDate      DateTime?
  project      Project       @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User?         @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  comments     Comment[]
  labels       Label[]       @relation("TaskLabels")
  subtasks     Subtask[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ActivityLog  ActivityLog[]
}

enum Status {
  BACKLOG
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Subtask {
  id        String   @id @default(uuid())
  title     String
  isDone    Boolean  @default(false)
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id    String @id @default(uuid())
  name  String @unique
  tasks Task[] @relation("TaskLabels")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
}
